import streamlit as st
import string

class VigenereCipher:
    def __init__(self, key: str):
        self.key = self._format_key(key)
        if not self.key:
            self.key = "A"
        self.alphabet = string.ascii_uppercase
        self.alphabet_size = len(self.alphabet)
    
    def _format_key(self, key: str):
        return ''.join(filter(str.isalpha, key.upper()))
    
    def _format_text(self, text: str):
        return ''.join(filter(str.isalpha, text.upper()))
    
    def _shift_char(self, char, key_char, encrypt=True):
        if char.upper() not in self.alphabet:
            return char
        shift = self.alphabet.index(key_char)
        char_index = self.alphabet.index(char.upper())
        if not encrypt:
            shift = -shift
        shifted = self.alphabet[(char_index + shift) % self.alphabet_size]
        return shifted if char.isupper() else shifted.lower()
    
    def encrypt(self, text: str) -> str:
        result = []
        key_index = 0
        for char in text:
            if char.isalpha():
                key_char = self.key[key_index % len(self.key)]
                result.append(self._shift_char(char, key_char, encrypt=True))
                key_index += 1
            else:
                result.append(char)
        return ''.join(result)
    
    def decrypt(self, text: str) -> str:
        result = []
        key_index = 0
        for char in text:
            if char.isalpha():
                key_char = self.key[key_index % len(self.key)]
                result.append(self._shift_char(char, key_char, encrypt=False))
                key_index += 1
            else:
                result.append(char)
        return ''.join(result)
    
    def hash(self, text: str) -> str:
        processed = self._format_text(text)
        hash_chars = []
        for i, char in enumerate(processed):
            key_char = self.key[i % len(self.key)]
            shifted_char = self._shift_char(char, key_char, encrypt=True)
            hash_chars.append(shifted_char)
        if not hash_chars:
            return "0"
        return hex(sum(self.alphabet.index(c) for c in hash_chars))[2:]

# Streamlit Interface
st.title("üîê Vigen√®re Cipher Web Tool")

key = st.text_input("Enter your cipher key:", max_chars=100)

if key and ''.join(filter(str.isalpha, key.upper())):
    cipher = VigenereCipher(key)
    operation = st.radio("Choose an operation", ["Encrypt", "Decrypt", "Hash"])

    input_method = st.radio("Input method", ["Manual text", "Upload .txt file"])
    
    input_text = ""
    if input_method == "Manual text":
        input_text = st.text_area("Enter your message:")
    else:
        uploaded_file = st.file_uploader("Choose a .txt file", type=["txt"])
        if uploaded_file:
            input_text = uploaded_file.read().decode("utf-8")

    if input_text:
        if operation == "Encrypt":
            result = cipher.encrypt(input_text)
            st.text_area("Encrypted Text", result, height=200)
        elif operation == "Decrypt":
            result = cipher.decrypt(input_text)
            st.text_area("Decrypted Text", result, height=200)
        elif operation == "Hash":
            result = cipher.hash(input_text)
            st.code(f"Hash Value: {result}")
else:
    st.warning("Please enter a valid cipher key containing at least one letter.")
